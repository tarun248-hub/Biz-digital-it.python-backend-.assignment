import os
import datetime
import json
from flask import Flask, request, jsonify
from apscheduler.schedulers.background import BackgroundScheduler

app = Flask(__name__)

# Load events from file
def load_events():
    if os.path.exists('events.json'):
        with open('events.json', 'r') as f:
            return json.load(f)
    else:
        return []

# Save events to file
def save_events(events):
    with open('events.json', 'w') as f:
        json.dump(events, f)

# Get events sorted by start time
def get_events():
    events = load_events()
    return sorted(events, key=lambda x: x['start_time'])

# Add event
@app.route('/events', methods=['POST'])
def add_event():
    data = request.get_json()
    if not all(k in data for k in ('title', 'description', 'start_time', 'end_time')):
        return jsonify({'error': 'Invalid request'}), 400
    events = load_events()
    events.append(data)
    save_events(events)
    return jsonify(data), 201

# List events
@app.route('/events', methods=['GET'])
def list_events():
    events = get_events()
    return jsonify(events)

# Update event
@app.route('/events/<int:event_id>', methods=['PUT'])
def update_event(event_id):
    data = request.get_json()
    events = load_events()
    for i, event in enumerate(events):
        if event['id'] == event_id:
            events[i] = data
            save_events(events)
            return jsonify(data), 200
    return jsonify({'error': 'Event not found'}), 404

# Delete event
@app.route('/events/<int:event_id>', methods=['DELETE'])
def delete_event(event_id):
    events = load_events()
    for i, event in enumerate(events):
        if event['id'] == event_id:
            del events[i]
            save_events(events)
            return jsonify({'result': 'Event deleted'}), 200
    return jsonify({'error': 'Event not found'}), 404

# Run the application
if __name__ == '__main__':
    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: print('Reminder: Upcoming events'), 'interval', minutes=1)
    scheduler.start()
    app.run(debug=True)


###To run the application, you need to install Flask and APScheduler:
pip install Flask APScheduler
###Then, you can run the application using the following command:

bash
python app.py

###To interact with the application, you can use a tool like Postman. Here are some example commands and outputs:
# Add an event
POST /events
{
    "title": "Test Event",
    "description": "This is a test event",
    "start_time": "2022-01-01T10:00:00",
    "end_time": "2022-01-01T12:00:00"
}

# List events
GET /events
[
    {
        "id": 1,
        "title": "Test Event",
        "description": "This is a test event",
        "start_time": "2022-01-01T10:00:00",
        "end_time": "2022-01-01T12:00:00"
    }
]

# Update an event
PUT /events/1
{
    "title": "Updated Test Event",
    "description": "This is an updated test event",
    "start_time": "2022-01-01T10:00:00",

